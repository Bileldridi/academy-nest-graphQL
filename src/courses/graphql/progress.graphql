type Query {
  getAllProgress: [Progress]
  Progress(id: String!): Progress
  removeProgress(id: String!): Message
  getCurrentProgress(id: String!): Progress
  updateAllPathsAdvancements: Progress
  updateAllBootcampsAdvancements: Progress
  updateAllCoursesAdvancements: Progress
  getPathProgress(pathId:String!):Progress

}

type Mutation {
  createProgress(createProgressInput: CreateProgressInput): Progress
  updateAdvancement(updateAdvanceInput: UpdateAdvanceInput): Progress
  updateAdvancementPath(updateAdvanceInput: UpdateAdvanceInput): Progress
  updateAdvancementModule(updateAdvanceInput: UpdateAdvanceInput): Progress
}

type Mutation {
  updateProgress(updateProgressInput: UpdateProgressInput): Progress
}

type Subscription {
  ProgressCreated: Progress
}

type Progress {
  id: String
  candidate: User
  chapter: Chapter
  type: String
  score: Int
  desc: String
  createDate: Float
  course: CourseProgress
  path: Level
  bootcamp: Module
  progress: Int
}
type CourseProgress {
  id: String
  lastChapter: String
  checkedChapters: [String]
}
type ProgressUpdate {
  id: String
  candidate: User
  chapter: Chapter
  type: String
  score: Int
  desc: String
  createDate: Float
}
input UpdateAdvanceInput {
  id: String
  lastChapter: String
  checkedChapters: [String]
  path: String
  bootcamp: String
}
input CreateProgressInput {
  candidate: String
  chapter: String
  type: String
  score: Int
  desc: String
}

input UpdateProgressInput {
  id: String
  candidate: String
  chapter: String
  type: String
  score: Int
  desc: String
}
