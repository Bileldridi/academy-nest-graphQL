type Query {
  getAllProgress: [Progress]
  getProgresss: [Progress]
  refreshProgress(id: String!): [ProgressUpdate]
  Progress(id: String!): Progress
  removeProgress(id: String!): Message
}

type Mutation {
  createProgress(createProgressInput: CreateProgressInput): Progress
}

type Mutation {
  updateProgress(updateProgressInput: UpdateProgressInput): Progress
}

type Subscription {
  ProgressCreated: Progress
}

type Progress {
  id: String
  candidate: User
  chapter: Chapter
  type: String
  score: Int
  desc: String
  createDate: Float
  path: PathProgress
  bootcamp: BootcampProgress
}
type ProgressUpdate {
  id: String
  candidate: User
  chapter: Chapter
  type: String
  score: Int
  desc: String
  createDate: Float
  path: PathProgressUpdate
  bootcamp: BootcampProgressUpdate
}
input CreateProgressInput {
  candidate: String
  chapter: String
  type: String
  score: Int
  desc: String
  idPath: String
  actualCourse: String
  advance: Int
  idModule: String
  actualPath: String
}

input UpdateProgressInput {
  id: String
  candidate: String
  chapter: String
  type: String
  score: Int
  desc: String
  idPath: String
  actualCourse: String
  advance: Int
  idModule: String
  actualPath: String
}
type PathProgress {
  idPath: String
  actualCourse: String
  advance: Int
}
type BootcampProgress {
  idModule: String
  actualPath: String
  advance: Int
}
type PathProgressUpdate {
  idPath: Level
  actualCourse: String
  advance: Int
}
type BootcampProgressUpdate {
  idModule: Module
  actualPath: String
  advance: Int
}