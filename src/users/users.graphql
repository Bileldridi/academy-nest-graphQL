type Query {
  getUsers: [User]
  getCurrentUser: User
  User(_id: ID!): User
  recover(email: String!): Message
  check(email: String!, password: String!, recoveryPass: String!): Message
}

type Mutation {
  createUser(createUserInput: CreateUserInput): User
  updateUser(userInput: UserInput): Message
  login(loginInput: LoginInput): UserLogin
}

type Subscription {
  UserCreated: User
}
type Message {
  message: String
  accessToken: String
}
type User {
  id: String
  firstname: String
  lastname: String
  createDate: Float
  password: String
  email: String
  image: String
  candidate: Candidate
  coach: Coach
  role: String
}

type UserLogin {
  message: String
  token: String
}

input CreateUserInput {
  firstname: String
  lastname: String
  password: String
  email: String
  image: String
  candidate: String
  coach: String
  role: String
}

input LoginInput {
  email: String
  password: String
}
input UserInput {
  id: String
  image: String
  firstname: String
  lastname: String
  email: String
  role: String
  coach: String
}
